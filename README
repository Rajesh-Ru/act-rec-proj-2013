Summer training on Computer Vision - Activity Recognition

Author: Rajesh
External dependencies: OpenGL, GLFW, OpenNI

Description:
  This repository contains the code from my 2013 summer research training. The main content in this repository is an acivity recognition framework located in the act_rec_2 folder. The design and implementation is guided by the Observor design pattern: publishers are responsible for fetching data from sensors and notifying their subscribers for new incoming data, while subscribers can be any objects that use sensory data (e.g. rendering units, activity recognition agents). The advantages of this design are mainly attributed to separation of concerns: publishers are written once for each type of sensors, subscribers are freed from the concern about sensory data retrieval and preprocessing, subscribers can subscribe to multiple publishers if it is necessary, and the recognition of a new activity is amount to programming only a new subscriber.
  The framwork has already included the recognition for five kinds of activities/actions. Logic-based methods that use skeletal information are utilized in the recognition of all the activities/actions, yet an additional learning-based approach is incorporated in the recognition of the fireball acitvity due to its intricacy.

Content description:
  act_rec - the first version of the activity recognition framework which
    uses only logic-based approachs;

  act_rec_2 - augmented act_rec with a learning-based approach;

  act_rec_t - an experiment of multi-threaded implementation of the
    recognition framework. It still has problem in graphics rendering;

  fire_sim - a code snippet, depending on the recognition framework, for
    fire simulation. I have to admit that it is not very realistic;

  fireball_sim - a code snippet, depending on the recognition framework,
    for simulation of a fireball;

  knockoff_temple_run - this is an alternative implementation of the game
    prototype. I made this attempt since the original implementation was
    poorly designed and coded. Generation, obliteration, and rendering of
    game map has been done but game avatar and other game logics have not
    been completed;

  mist_sim - an attempt to simulate mist. It is totally screwed;

  test_interface - testing scripts for my model rendering APIs;

  test_models - a small program that displays a given Wavefront OBJ model.
