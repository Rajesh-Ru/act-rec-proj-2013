Summer training on Computer Vision - Activity Recognition

Author: Rajesh
External dependencies: OpenGL, GLFW, OpenNI
Demo video: http://v.youku.com/v_show/id_XNjAzNDAxMjY0.html

Description:
  This repository contains the code from my 2013 summer research training. The main content in this repository is an activity recognition framework located in the act_rec_2 folder. The design and implementation is guided by the Observer design pattern: each activity is represented as a publisher who is responsible of recognition of the activity and notifying its subscribers, while subscribers can be any objects that concern the activity. The merits of this design are mainly attributed to separation of concerns: publishers are independent and hence can be modified or replaced easily, subscribers are freed from the concern about how to recognize an activity and can subscribe to multiple publishers if it is necessary, and the recognition of a new activity is amount to programming only a new publisher.
  The framework has already included the recognition for five kinds of activities/actions. Logic-based methods that use skeletal information are utilized in the recognition of all the activities/actions, yet an additional learning-based approach is incorporated in the recognition of the fireball activity due to its intricacy.

Content description:
  act_rec - the first version of the activity recognition framework which
    uses only logic-based approaches;

  act_rec_2 - augmented act_rec with a learning-based approach;

  act_rec_t - an experiment of multi-threaded implementation of the
    recognition framework. It still has problem in graphics rendering;

  fire_sim - a code snippet, depending on the recognition framework, for
    fire simulation. I have to admit that it is not very realistic;

  fireball_sim - a code snippet, depending on the recognition framework,
    for simulation of a fireball;

  knockoff_temple_run - this is an alternative implementation of the game
    prototype. I made this attempt since the original implementation was
    poorly designed and coded. Generation, obliteration, and rendering of
    game map has been done but game avatar and other game logics have not
    been completed;

  mist_sim - an attempt to simulate mist. It is totally screwed;

  test_interface - testing scripts for my model rendering APIs;

  test_models - a small program that displays a given Wavefront OBJ model.
